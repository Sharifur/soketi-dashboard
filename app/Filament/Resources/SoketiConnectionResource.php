<?php

namespace App\Filament\Resources;

use App\Filament\Resources\SoketiConnectionResource\Pages;
use App\Models\SoketiConnection;
use App\Models\SoketiApp;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Infolists;
use Filament\Infolists\Infolist;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\HtmlString;

class SoketiConnectionResource extends Resource
{
    protected static ?string $model = SoketiConnection::class;

    protected static ?string $navigationIcon = 'heroicon-o-signal';

    protected static ?string $navigationLabel = 'Connections';

    protected static ?string $modelLabel = 'Connection';

    protected static ?string $pluralModelLabel = 'Connections';

    protected static ?int $navigationSort = 2;

    protected static ?string $navigationGroup = 'Soketi Management';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Connection Details')
                    ->description('Information about the WebSocket connection')
                    ->schema([
                        Forms\Components\TextInput::make('connection_id')
                            ->label('Connection ID')
                            ->required()
                            ->unique(ignoreRecord: true)
                            ->maxLength(255),

                        Forms\Components\Select::make('app_id')
                            ->label('Soketi Application')
                            ->options(SoketiApp::pluck('name', 'app_id'))
                            ->required()
                            ->searchable(),

                        Forms\Components\TextInput::make('socket_id')
                            ->label('Socket ID')
                            ->maxLength(255)
                            ->placeholder('Generated by Soketi'),

                        Forms\Components\TextInput::make('channel_name')
                            ->label('Channel Name')
                            ->maxLength(255)
                            ->placeholder('e.g., private-user.123, presence-chat'),

                        Forms\Components\Toggle::make('is_connected')
                            ->label('Currently Connected')
                            ->default(true),
                    ])->columns(2),

                Forms\Components\Section::make('Client Information')
                    ->description('Information about the connected client')
                    ->schema([
                        Forms\Components\TextInput::make('ip_address')
                            ->label('IP Address')
                            ->maxLength(45)
                            ->placeholder('192.168.1.100'),

                        Forms\Components\Textarea::make('user_agent')
                            ->label('User Agent')
                            ->rows(2)
                            ->placeholder('Browser/application information'),

                        Forms\Components\KeyValue::make('user_data')
                            ->label('User Data')
                            ->keyLabel('Property')
                            ->valueLabel('Value')
                            ->reorderable()
                            ->addActionLabel('Add User Property'),
                    ])->columns(2),

                Forms\Components\Section::make('Timestamps')
                    ->description('Connection timing information')
                    ->schema([
                        Forms\Components\DateTimePicker::make('connected_at')
                            ->label('Connected At')
                            ->required()
                            ->default(now()),

                        Forms\Components\DateTimePicker::make('disconnected_at')
                            ->label('Disconnected At')
                            ->nullable(),
                    ])->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('connection_id')
                    ->label('Connection ID')
                    ->searchable()
                    ->sortable()
                    ->fontFamily('mono')
                    ->limit(20)
                    ->tooltip(fn ($record) => $record->connection_id),

                Tables\Columns\TextColumn::make('soketiApp.name')
                    ->label('Application')
                    ->searchable()
                    ->sortable()
                    ->badge()
                    ->color('primary'),

                Tables\Columns\TextColumn::make('socket_id')
                    ->label('Socket ID')
                    ->searchable()
                    ->fontFamily('mono')
                    ->limit(15)
                    ->placeholder('Not assigned')
                    ->tooltip(fn ($record) => $record->socket_id),

                Tables\Columns\TextColumn::make('channel_name')
                    ->label('Channel')
                    ->searchable()
                    ->limit(25)
                    ->placeholder('No channel')
                    ->badge()
                    ->color(fn (string $state): string => match (true) {
                        str_starts_with($state, 'private-') => 'warning',
                        str_starts_with($state, 'presence-') => 'success',
                        str_starts_with($state, 'public-') => 'info',
                        default => 'gray',
                    }),

                Tables\Columns\IconColumn::make('is_connected')
                    ->label('Status')
                    ->boolean()
                    ->trueIcon('heroicon-o-signal')
                    ->falseIcon('heroicon-o-signal-slash')
                    ->trueColor('success')
                    ->falseColor('danger'),

                Tables\Columns\TextColumn::make('ip_address')
                    ->label('IP Address')
                    ->searchable()
                    ->fontFamily('mono')
                    ->toggleable(isToggledHiddenByDefault: true),

                Tables\Columns\TextColumn::make('formatted_duration')
                    ->label('Duration')
                    ->getStateUsing(fn (SoketiConnection $record) => $record->formatted_duration)
                    ->badge()
                    ->color('info'),

                Tables\Columns\TextColumn::make('connected_at')
                    ->label('Connected')
                    ->dateTime()
                    ->sortable()
                    ->since()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('disconnected_at')
                    ->label('Disconnected')
                    ->dateTime()
                    ->sortable()
                    ->since()
                    ->placeholder('Still connected')
                    ->toggleable(),

                Tables\Columns\TextColumn::make('created_at')
                    ->label('Recorded')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('id')
                    ->label('Application')
                    ->options(SoketiApp::pluck('app_name', 'id'))
                    ->searchable(),

                Tables\Filters\TernaryFilter::make('is_connected')
                    ->label('Connection Status')
                    ->placeholder('All connections')
                    ->trueLabel('Connected only')
                    ->falseLabel('Disconnected only'),

                Tables\Filters\Filter::make('channel_type')
                    ->form([
                        Forms\Components\Select::make('type')
                            ->options([
                                'private' => 'Private Channels',
                                'presence' => 'Presence Channels',
                                'public' => 'Public Channels',
                            ])
                            ->placeholder('All channel types'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query->when(
                            $data['type'],
                            fn (Builder $query, $type): Builder => $query->where('channel_name', 'like', $type . '-%')
                        );
                    }),

                Tables\Filters\Filter::make('connected_today')
                    ->label('Connected Today')
                    ->query(fn (Builder $query): Builder => $query->whereDate('connected_at', today())),

                Tables\Filters\Filter::make('long_connections')
                    ->label('Long Connections (>1 hour)')
                    ->query(function (Builder $query): Builder {
                        return $query->whereRaw('
                            CASE
                                WHEN disconnected_at IS NULL THEN TIMESTAMPDIFF(SECOND, connected_at, NOW()) > 3600
                                ELSE TIMESTAMPDIFF(SECOND, connected_at, disconnected_at) > 3600
                            END
                        ');
                    }),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),

                Tables\Actions\Action::make('disconnect')
                    ->label('Disconnect')
                    ->icon('heroicon-o-x-mark')
                    ->color('danger')
                    ->visible(fn (SoketiConnection $record) => $record->is_connected)
                    ->requiresConfirmation()
                    ->modalHeading('Disconnect Connection')
                    ->modalDescription('Are you sure you want to forcefully disconnect this connection?')
                    ->action(function (SoketiConnection $record) {
                        $record->update([
                            'is_connected' => false,
                            'disconnected_at' => now(),
                        ]);

                        // In a real implementation, you'd also send a disconnect
                        // command to the actual Soketi server

                        return redirect()->back();
                    }),

                Tables\Actions\Action::make('view_user_data')
                    ->label('User Data')
                    ->icon('heroicon-o-user')
                    ->color('info')
                    ->visible(fn (SoketiConnection $record) => !empty($record->user_data))
                    ->modalContent(fn (SoketiConnection $record) => view('filament.modals.user-data', [
                        'userData' => $record->user_data
                    ]))
                    ->modalHeading('Connection User Data')
                    ->modalSubmitAction(false)
                    ->modalCancelActionLabel('Close'),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),

                    Tables\Actions\BulkAction::make('disconnect_selected')
                        ->label('Disconnect Selected')
                        ->icon('heroicon-o-x-mark')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->action(function ($records) {
                            $records->each(function (SoketiConnection $record) {
                                if ($record->is_connected) {
                                    $record->update([
                                        'is_connected' => false,
                                        'disconnected_at' => now(),
                                    ]);
                                }
                            });
                        }),

                    Tables\Actions\BulkAction::make('export_connections')
                        ->label('Export Selected')
                        ->icon('heroicon-o-arrow-down-tray')
                        ->color('info')
                        ->action(function ($records) {
                            // Implementation for exporting connection data
                            // You could generate CSV, JSON, etc.
                            return redirect()->back();
                        }),
                ]),
            ])
            ->defaultSort('connected_at', 'desc')
            ->poll('30s'); // Auto-refresh every 30 seconds
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\Section::make('Connection Overview')
                    ->schema([
                        Infolists\Components\Grid::make(2)
                            ->schema([
                                Infolists\Components\TextEntry::make('connection_id')
                                    ->label('Connection ID')
                                    ->fontFamily('mono')
                                    ->copyable(),

                                Infolists\Components\IconEntry::make('is_connected')
                                    ->label('Status')
                                    ->boolean()
                                    ->trueIcon('heroicon-o-signal')
                                    ->falseIcon('heroicon-o-signal-slash')
                                    ->trueColor('success')
                                    ->falseColor('danger'),
                            ]),

                        Infolists\Components\TextEntry::make('soketiApp.name')
                            ->label('Application'),
                    ]),

                Infolists\Components\Section::make('Connection Details')
                    ->schema([
                        Infolists\Components\TextEntry::make('socket_id')
                            ->label('Socket ID')
                            ->fontFamily('mono')
                            ->copyable()
                            ->placeholder('Not assigned'),

                        Infolists\Components\TextEntry::make('channel_name')
                            ->label('Channel Name')
                            ->badge()
                            ->color(fn (?string $state): string => match (true) {
                                !$state => 'gray',
                                str_starts_with($state, 'private-') => 'warning',
                                str_starts_with($state, 'presence-') => 'success',
                                str_starts_with($state, 'public-') => 'info',
                                default => 'gray',
                            })
                            ->placeholder('No channel'),

                        Infolists\Components\TextEntry::make('formatted_duration')
                            ->label('Connection Duration')
                            ->getStateUsing(fn (SoketiConnection $record) => $record->formatted_duration),
                    ])->columns(3),

                Infolists\Components\Section::make('Client Information')
                    ->schema([
                        Infolists\Components\TextEntry::make('ip_address')
                            ->label('IP Address')
                            ->fontFamily('mono')
                            ->placeholder('Not recorded'),

                        Infolists\Components\TextEntry::make('user_agent')
                            ->label('User Agent')
                            ->placeholder('Not recorded')
                            ->limit(100),
                    ])->columns(2),

                Infolists\Components\Section::make('User Data')
                    ->schema([
                        Infolists\Components\KeyValueEntry::make('user_data')
                            ->label('Custom User Data')
                            ->placeholder('No user data recorded'),
                    ])
                    ->visible(fn (SoketiConnection $record) => !empty($record->user_data)),

                Infolists\Components\Section::make('Timestamps')
                    ->schema([
                        Infolists\Components\TextEntry::make('connected_at')
                            ->label('Connected At')
                            ->dateTime()
                            ->since(),

                        Infolists\Components\TextEntry::make('disconnected_at')
                            ->label('Disconnected At')
                            ->dateTime()
                            ->since()
                            ->placeholder('Still connected'),

                        Infolists\Components\TextEntry::make('created_at')
                            ->label('Record Created')
                            ->dateTime()
                            ->since(),

                        Infolists\Components\TextEntry::make('updated_at')
                            ->label('Last Updated')
                            ->dateTime()
                            ->since(),
                    ])->columns(2),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListSoketiConnections::route('/'),
            'create' => Pages\CreateSoketiConnection::route('/create'),
            'view' => Pages\ViewSoketiConnection::route('/{record}'),
            'edit' => Pages\EditSoketiConnection::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('is_connected', true)->count();
    }

    public static function getNavigationBadgeColor(): string|array|null
    {
        $count = static::getModel()::where('is_connected', true)->count();

        if ($count > 100) {
            return 'success';
        }

        if ($count > 50) {
            return 'warning';
        }

        if ($count > 0) {
            return 'primary';
        }

        return 'gray';
    }

    public static function getGlobalSearchEloquentQuery(): Builder
    {
        return parent::getGlobalSearchEloquentQuery()->with(['soketiApp']);
    }

    public static function getGloballySearchableAttributes(): array
    {
        return ['connection_id', 'socket_id', 'channel_name', 'ip_address', 'soketiApp.name'];
    }

    public static function getGlobalSearchResultDetails($record): array
    {
        return [
            'Application' => $record->soketiApp?->name,
            'Channel' => $record->channel_name ?? 'No channel',
            'Status' => $record->is_connected ? 'Connected' : 'Disconnected',
        ];
    }
}
